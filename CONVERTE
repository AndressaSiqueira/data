function Convert-ServiceConnectionsToOIDC {
    param (
        [string]$OrganizationUrl,
        [string]$Project
    )

    $apiVersion = "7.1"
    $azdoResource = Get-AzDoResourceId
    if (-not $azdoResource) {
        throw "N√£o foi poss√≠vel obter o ID do recurso do Azure DevOps dinamicamente."
    }

    $OrganizationUrl = $OrganizationUrl.TrimEnd('/')

    Write-Host "üîê Iniciando a convers√£o de Service Connections para OIDC..."

    try {
        # Obter todas as conex√µes
        Write-Host "üîç Obtendo todas as conex√µes de servi√ßo..."
        $allConnections = az rest `
            --resource $azdoResource `
            --method GET `
            --url "$OrganizationUrl/$Project/_apis/serviceendpoint/endpoints?includeDetails=true&api-version=$apiVersion" `
            | ConvertFrom-Json

        if (!$allConnections) {
            Write-Warning "üö´ Nenhuma conex√£o encontrada. Verifique se o URL e o projeto est√£o corretos."
            return
        }

        # Log detalhado das conex√µes obtidas
        Write-Host "üîç Conex√µes obtidas: $($allConnections.value | ConvertTo-Json -Depth 2)"

        # Filtrar conex√µes eleg√≠veis
        Write-Host "üîç Filtrando conex√µes eleg√≠veis para convers√£o..."
        $eligibleConnections = $allConnections.value | Where-Object {
            $_.type -eq 'azurerm' -and
            $_.authorization.scheme -eq 'ServicePrincipal' -and
            $_.data.creationMode -eq 'Manual' -and
            $_.name -like 'spn-iac*'
        }

        if (!$eligibleConnections -or $eligibleConnections.Count -eq 0) {
            Write-Warning "üö´ Nenhuma conex√£o manual com Service Principal encontrada para converter."
            return
        }

        # Log detalhado das conex√µes eleg√≠veis
        Write-Host "üîç Conex√µes eleg√≠veis: $($eligibleConnections | ConvertTo-Json -Depth 2)"

        foreach ($sc in $eligibleConnections) {
            Write-Host "üîÅ Convertendo a conex√£o '$($sc.name)' para Workload Identity Federation..."

            $sc.authorization.scheme = "WorkloadIdentityFederation"

            if ($sc.data.PSObject.Properties.Name -contains 'revertSchemeDeadline') {
                $sc.data.PSObject.Properties.Remove('revertSchemeDeadline')
            }

            $body = $sc | ConvertTo-Json -Depth 10 -Compress
            $putUrl = "$OrganizationUrl/$Project/_apis/serviceendpoint/endpoints/$($sc.id)?operation=ConvertAuthenticationScheme&api-version=$apiVersion"

            try {
                $result = az rest `
                    --method PUT `
                    --url $putUrl `
                    --headers "Content-Type=application/json" `
                    --body $body `
                    --resource $azdoResource `
                    | ConvertFrom-Json

                if ($result) {
                    Write-Host "‚úÖ Conex√£o '$($sc.name)' convertida com sucesso!"
                } else {
                    Write-Error "‚ùå Falha ao converter a conex√£o '$($sc.name)'."
                }
            } catch {
                Write-Error "‚ùå Erro ao converter a conex√£o '$($sc.name)': $_"
            }
        }
    } catch {
        Write-Error "‚ùå Ocorreu um erro durante a convers√£o: $_"
    }

    Write-Host "‚úÖ Convers√£o de Service Connections para OIDC conclu√≠da."
}

function Get-AzDoResourceId {
    Write-Host "üîç Obtendo o ID do recurso do Azure DevOps dinamicamente..."
    try {
        $response = az rest `
            --method GET `
            --url "https://management.azure.com/providers/Microsoft.DevOps/operations?api-version=2019-07-01-preview" `
            | ConvertFrom-Json

        # Buscar o recurso com base em um crit√©rio gen√©rico, como o tipo ou descri√ß√£o
        $resource = $response.value | Where-Object { $_.displayName -like "*Azure DevOps*" -or $_.name -like "*devops*" } | Select-Object -First 1

        if ($resource) {
            Write-Host "‚úÖ Recurso encontrado: $($resource.displayName)"
            return $resource.id
        } else {
            Write-Warning "üö´ N√£o foi poss√≠vel encontrar um recurso correspondente."
            return $null
        }
    } catch {
        Write-Error "‚ùå Erro ao obter o ID do recurso: $_"
        return $null
    }
}
